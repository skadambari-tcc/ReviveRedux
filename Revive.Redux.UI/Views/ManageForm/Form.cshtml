@model Revive.Redux.Entities.FormModel

@{
    ViewBag.Title = "Manage Custom Fields";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="modal-body" style="height:441px !important;">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        @Html.AntiForgeryToken()
        <input type="hidden" id="RecordID" name="DeactivateRecord" />

        <div id="myModal" class="modal fade" data-keyboard="false" data-backdrop="static">
            <div class="modal-dialog modal-sm">
                <div class="modal-content">
                    <!-- dialog body -->
                    <div class="modal-body">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <div>
                            @Html.Label("Title", htmlAttributes: new { @class = "", @id = "lblTitle" })
                        </div>
                    </div>

                    <!-- dialog buttons -->
                    <div class="modal-footer footerbtn">
                        <button type="button" id="btnDeactive" class="btn GreenBtn btn-primary" data-dismiss="modal">YES</button>
                        <button type="button" class="btn btn-primary YellowBtn" data-dismiss="modal">NO</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="contant_page">
                    <!-- tittle -->
                    <div class="row">
                        <div style="margin-left: 0.5%;">
                            <h2>@Html.DisplayFor(model => model.PageHeader)</h2>
                        </div>
                        <div style="text-align:center;margin-top: -5%;">
                            <div class="col-md-8 col-sm-8" style="width:59% !important;">
                                <div class="select-icon">
                                    @Html.DropDownListFor(M => M.CustomerId, new SelectList(Model.CustomerNameList, "Id", "Text"), "All", new { @class = "form-control pull-right topspace selecter", @style = "width: 200px;", @id = "ddlCustomerName" })

                                </div>
                                <span class="field-validation-error" style="float:right;"><label id="lblErrorTitle"></label></span>
                            </div>

                            <div class="col-md-4  col-sm-4">
                                <button id="btnCreate" class="btn GreenBtn" type="button">@Html.DisplayFor(model => model.PageButtonSubmit)</button>
                            </div>

                        </div>
                    </div>
                    <div class="row spacer1 spacer1">

                    </div>
                    <div class="row">
                        <div class="table-responsive Kendogrid col-md-10" style="margin-top:3%;">
                            @(Html.Kendo().Grid(Model.FieldNameList)
    .Name("grdForm")

                .DataSource(dataSource => dataSource.Ajax().PageSize(10).ServerOperation(false)
                        .Read(read => read.Action("FormAjax", "ManageForm").Data("GetCustomerId"))
)
    .Columns(columns =>
    {
        columns.Bound(p => p.CustomFieldName).Title("Field Name");
        columns.Bound(p => p.CustomerName).Title("Customer Name");
        columns.Bound(p => p.CustomFieldId).Title("Edit").ClientTemplate(
                       "<a href='" + Url.Action("Edit", "ManageForm") + "/#= CustomFieldId #'" + "><i class='fa fa-pencil fa-lg icon-color', style='align:center'></i></a>").Sortable(false).Filterable(false);
        columns.Bound(p => p.Status).Title("Delete").ClientTemplate(
                       "# if (!Status) { #<a id=\"action\" runat=\"server\" href='javascript: void(0);' onclick=\"Action('#= CustomFieldId#,#= Status#');\" " + "><img src='" + Url.Content("~/Scripts/images/disable_icon.png") + "'/></a># }else{#<a id=\"action\" runat=\"server\" href='javascript: void(0);' onclick=\"Action('#= CustomFieldId#,#= Status#');\" " + "><img src='" + Url.Content("~/Scripts/images/delite_icon.png") + "' title='Delete'/></a>#} #").Sortable(false).Filterable(false);
    })
.HtmlAttributes(new { style = "width: 100%;" })
             .Pageable(pageable =>
             {
                 pageable.Refresh(true);
                 pageable.PageSizes(new int[] { 10, 20, 50 });
                 pageable.Messages(messages => messages.Empty("No custom field available!"));
             })
                .Filterable(f => f.Operators(o => o.ForString(fs =>
                            {
                                fs.Clear().Contains("Contains");
                                fs.DoesNotContain("Does not contain");
                                fs.IsEqualTo("Equal to");
                                fs.IsNotEqualTo("Not equal to");
                                fs.StartsWith("Starts with");
                                fs.EndsWith("Ends with");
                            })))
                        .Sortable()
                        .Scrollable()
                        .ColumnResizeHandleWidth(900)

                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @Html.HiddenFor(M => M.CustomerId)
        @Html.HiddenFor(M => M.PageMode)
        @Html.HiddenFor(M => M.FieldCountValid)
        @Html.HiddenFor(M => M.CustomFieldCount)
        @Html.HiddenFor(M => M.Message)
    }
</div>
<style type="text/css">
    .k-grid-content {
        max-height: 400px;
        overflow: auto;
    }

    .modal .fade {
        top: 30%;
        transition: opacity 0.3s linear;
    }

        .modal.fade.in {
            top: 30%;
        }

    .modal-backdrop {
        background-color: #000;
        bottom: 0;
        left: 0;
        position: fixed;
        right: 0;
        top: 0;
        z-index: 0 !important;
    }

    .contant_sector {
        height: 100%;
    }
</style>

<script type="text/javascript">
    var nCount;

    function Action(Id) {
        var arr = Id.split(',');;
        $('#myModal').modal('show');
        var status = (arr[1] === 'true');
        if (!status) {
            $("#lblTitle").text("Do you want to activate this custom field?");
        }
        else {
            $("#lblTitle").text("Do you want to delete this custom field?");
        }

        $("#RecordID").val(arr);
    }

    $(function () {
        $('#grdForm div:nth-child(2)').css("height", "auto");

        $('#grdForm div:nth-child(2)').css("max-height", "150px");


    });

    $('#btnDeactive').click(function (e) {
        var record = $("#RecordID").val();
        var arr = record.split(',');
        var recordID = arr[0];
        var status = (arr[1] === 'true');
        var objSubmitFormMode =
             {
                 "CustomFieldId": recordID,
                 "Status": status
             };

        $.ajax({
            type: "POST",
            url: '@Url.Action("ActivateDeactivateField", "ManageForm")',

            //Your Action name in the DropDownListConstroller.cs
            data: JSON.stringify(objSubmitFormMode),
            contentType: "application/json; charset=utf-8",
            dataType: "json",

        }).done(function (data) {
            //Successfully pass to server and get response
            $('#grdForm').data().kendoGrid.dataSource.read(); // or
            if (data) {
                toastr.success('@ReviveMessages.Delete');
            }
            else {
                toastr.error('Error updating the record!');
            }
        })
    });

    $(document).ready(function () {
        Revive.Redux.Common.SetParentMenuSelected('Admin');
        Revive.Redux.Common.SetKendoGridHeight();

        // Customer dropdown change event
        $("#ddlCustomerName").change(function () {
            //   $('#grdForm').data().kendoGrid.dataSource.read();
            var grid = $('#grdForm').data().kendoGrid;
            grid.dataSource.read();
            grid.refresh();
            $("#lblErrorTitle").text("");
        });

        $("#btnCreate").click(function (e) {
            var nCustomerId = GetCustomerOnlyId();
            location.href = '@Url.Action("View", "ManageForm")' + '?Id=' + nCustomerId;
            return true;
        });
    });

    function GetCustomerId() {
        var nCustomerId = $("#ddlCustomerName").val();
        if (nCustomerId == '')
            nCustomerId = 0;

        return { id: nCustomerId };
    }

    function GetCustomerOnlyId() {
        var nCustomerId = $("#ddlCustomerName").val();
        if (nCustomerId == '--Select--')
            nCustomerId = 0;

        return nCustomerId;
    }

    function OnGridChange() {
        var grid = $("#grdForm").data("kendoGrid");
        nCount = grid.dataSource.total();
    }

    function onErrorSearchWindow()
    { }


    @if (TempData["isCreatedSuccess"] != null && (bool)TempData["isCreatedSuccess"] == true)
    {
        
        <text>toastr.success('@ReviveMessages.Add');</text>
    }
    @if (TempData["isUpdatedSuccess"] != null && (bool)TempData["isUpdatedSuccess"] == true)
    {
        
        <text>toastr.success('@ReviveMessages.Update');</text>
    }
    
    

</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
