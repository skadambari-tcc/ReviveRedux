@using Kendo.Mvc.UI
@using Revive.Redux.Entities
@model MachineModel
<style>
    #body {
        /*height: 100%;*/
    }

    .LableTextMargin {
        margin-top: 3px;
    }

    .Title {
        text-align: left;
        font-size: larger;
        color: #7c0000;
    }

    .k-grid tbody tr:hover {
        background: #faecc1;
    }
</style>
@{
    ViewBag.Title = "Update Shipping Info";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@using (Html.BeginForm("AddShippingDetailsByXLSFile", "Machine", FormMethod.Post))
{
    if (ViewBag.IsModalValid)
    {
        <input type="hidden" value="@Model.JobOrderHeaderID" name="strJobOrderHeaderID" />
        <div id="FileUpload" class="modal fade" data-keyboard="false" data-backdrop="static">
            <div class="modal-dialog">
                <div class="modal-content" style="">
                    <!-- dialog body -->
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <div>
                            @Html.Label("Title", htmlAttributes: new { @class = "", @id = "lblFileTitle" })
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-12">   
                                <div class="form-group">
                                    @Html.Label("File Upload", htmlAttributes: new { @class = "col-sm-3 control-label text-right required", style = "padding-top: 10px;" })
                                    <div>
                                    @(Html.Kendo().Upload()
                                    .Name("files")
                                    .Multiple(false)
                                    .Messages(m => m.Select("Select file"))
                                    .HtmlAttributes(new { @accept = ".xlsx,.xls", @class = "" })
                                    .Events(events => events.Select("check_extension"))
                                    )
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- dialog buttons -->
                    <div class="modal-footer">
                        <div class="row">
                            <div class="col-md-2"></div>
                            <div class="col-md-8" style="text-align:center">
                                <button type="submit" id="btnFileUpload" class="btn GreenBtn" data-dismiss="">Import</button>
                                <button type="button" class="btn YellowBtn" data-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
@if (!ViewBag.IsModalValid)
{
    <div id="FileUploadResult" class="modal fade in" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <!-- dialog body -->
                <div class="modal-body">
                    <button type="button" class="close" id="btnResultClose" data-dismiss="modal">&times;</button>
                    <div>
                        @Html.Label("Result Summary", htmlAttributes: new { @class = "", @id = "lblResultTitle" })
                    </div>
                </div>
                <div class="k-grid-content">
                    @(Html.Kendo().Grid(Model.MachineResult)
                    .Name("LocationResultGrid")
                    .DataSource(dataSource => dataSource.Ajax().PageSize(10).ServerOperation(false)
        .Read(read => read.Action("ShippingDetailResultAjax", "Machine")))
                    .Columns(columns =>
                    {
                    columns.Bound(p => p.LineNumber).Title("Line Name").Filterable(true).Width(120);
                    columns.Bound(p => p.Message).Title("Result").Filterable(true);
                    })
                    .Pageable(pageable =>
                    {
                        pageable.Refresh(true);
                        pageable.PageSizes(new int[] { 10, 20, 50 });
                        pageable.Messages(messages => messages.Empty("No location available!"));
                    })
                    .Sortable()
                    .Filterable()
                    .HtmlAttributes(new { style = "width:575px" })
                    )
                </div>
            </div>
        </div>
    </div>
}


<div class="row">
    <div class="col-md-12">
        <div class="contant_page">
            <!-- tittle -->
            <div class="lable-align-top">
                    <h2>Edit Order</h2>
            </div>
            <div class="row">
                <!-- collun1 -->
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Order Number", htmlAttributes: new { @class = "col-md-6  col-sm-3 control-label text-right" })
                        <div class="col-sm-6 LableTextMargin">
                            @ViewBag.OrderNumber
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-6  col-sm-3 control-label text-right" for="inputtype1">Expected Date</label>
                        <div class="col-sm-6 LableTextMargin">
                            @ViewBag.ExpectedDate
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.Label("Customer Name", htmlAttributes: new { @class = "col-md-6  col-sm-3 control-label text-right" })
                        <div class="col-sm-6 LableTextMargin">
                            @ViewBag.CustomerName
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-6  col-sm-3 control-label text-right" for="inputtype1">M/c Specs</label>
                        <div class="col-sm-6 LableTextMargin">
                            @ViewBag.MachineSpecs
                        </div>
                    </div>
                </div>
                <!-- collun2 -->
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="col-md-6  col-sm-3 control-label text-right" for="inputtype1">No. of Machines</label>
                        <div class="col-sm-6 LableTextMargin">
                            @ViewBag.NoOfMachines
                        </div>
                    </div>
                    <div class="form-group">
                        @*<label class="col-md-6  col-sm-3 control-label text-right" for="inputtype1">Import Shipping Details</label>*@                        
                        <div class="col-sm-6 LableTextMargin">
                            <input type="button" title="ImportShippingDetails" class="GreenBtn" value="Import Shipping Details" id="btnImportShippingDetails" />
                        </div>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(m => m.JobOrderHeaderID)
            @Html.HiddenFor(m => m.NoOfMachines)
            <br />
            <!-- collun4 -->
            <div class="row">
                <div class="grid-align table-responsive Kendogrid">
                    @(Html.Kendo().Grid<MachineModel>()
                .Name("ShippingInfo")
                .Columns(columns =>
                {
                    columns.Bound(p => p.MachineId_Val).Title("Machine Id");
                    columns.Bound(p => p.Location).Title("Location");
                    columns.Bound(p => p.MachineStatusName).Title("Machine Status");
                    columns.Bound(p => p.MidLineTest).Title("Mid-Line Test");
                    columns.Bound(p => p.ULTest).Title("UL Test");
                    columns.Bound(p => p.FinalTest).Title("Final Test");
                    columns.Bound(p => p.ShippingId).Title("Shipping Id").Width(170);
                    columns.Command(commands => { commands.Edit(); }).Title("Edit");
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                        .Pageable(pageable =>
                                                                {
                                                                    pageable.Refresh(true);
                                                                    pageable.PageSizes(new int[] { 10, 20, 50 });
                                                                    pageable.Messages(messages => messages.Empty("No records available!"));
                                                                })
                            .Filterable(f => f.Operators(o => o.ForString(fs =>
                            {
                                fs.Clear().Contains("Contains");
                                fs.DoesNotContain("Does not contain");
                                fs.IsEqualTo("Equal to");
                                fs.IsNotEqualTo("Not equal to");
                                fs.StartsWith("Starts with");
                                fs.EndsWith("Ends with");
                            })))
                        .Sortable()
                                    .HtmlAttributes(new { style = "width:91%;height:215px" })
                                .Scrollable()
                                .ColumnResizeHandleWidth(900)
                .DataSource(dataSource => dataSource.Ajax()
                    .PageSize(10)
                    .Events(events => events.Error("onError").RequestEnd("onRequestEnd"))
                    .Model(model =>
                    {
                        model.Id(p => p.MachineMappingId);
                        model.Field(p => p.MachineId_Val).Editable(false);
                        model.Field(p => p.Location).Editable(false);
                        model.Field(p => p.MachineStatusName).Editable(false);
                        model.Field(p => p.MidLineTest).Editable(false);
                        model.Field(p => p.ULTest).Editable(false);
                        model.Field(p => p.FinalTest).Editable(false);
                    })
                    .Read(read => read.Action("GetShippingInfoAjax", "Machine").Data("additionalInfo"))
                    .Update(update => update.Action("UpdateShippingInfo", "Machine"))
                )
                    )
                </div>

            </div>
            <br />
            <div class="row">
                <div class="col-mod-12">
                    <div class="col-sm-5">
                    </div>
                    <div class="col-sm-7">
                        <button id="btnBack" type="button" class="btn login_button btn-primary yellow">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {

        $('#btnFileUpload').click(function (e) {
            var result = true;
            var file = $("#files").data("kendoUpload");
            var len = file.wrapper.find(".k-file").length;
            if (len === 0) {
                result = false;
                toastr.error('Please select a file to upload!');
            }
            return result;
        });

        $('#btnImportShippingDetails').click(function (e) {
            $('#FileUpload').modal('show');
            $("#lblFileTitle").text("Upload Shipping Details");
            $('#fileLocationUpdload').val('');

        });

        Revive.Redux.Common.SetParentMenuSelected('Orders');

        $("#btnBack").click(function () {
            window.location.href = '@Url.Action("Manage", "Order")';
        });
    });
    function additionalInfo() {
        return { jobOrderId: $("input#JobOrderHeaderID").val() }
    }
    function onError(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    function onRequestEnd(e) {
        if (e.type === "update") {
            e.sender.read();
        }
    }

    function check_extension(e) {
        var files = e.files;
        var Result = true;
        $.each(files, function () {

            if (this.extension.toLowerCase() != ".xlsx") {
                if (this.extension.toLowerCase() != ".xls") {
                    toastr.error("Only .xlsx or .xls files can be uploaded!");
                    e.preventDefault();
                    Result = false;
                }
            }

            if (this.size / 1024 / 1024 > 5) {
                toastr.error("Max 5Mb file size is allowed!")
                e.preventDefault();
                Result = false;
            }
        });

        return Result;
    }

    //btnclose of result window(Modal)
    $("#btnResultClose").click(function (e) {
        window.location.href = '@Url.Action("Manage", "Order", new { id=20})';
    });
</script>
