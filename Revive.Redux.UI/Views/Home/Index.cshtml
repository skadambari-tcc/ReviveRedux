@{
    ViewBag.Title = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Revive.Redux.Entities.User_LevelModel
@using Revive.Redux.Controllers.Common
<style type="text/css">
    /*.container {
        margin-left: auto;
        margin-right: auto;
        padding-left: 15px;
        padding-right: 45px;
    }*/

    .k-grid-content {
        /* max-height: 200px;
        max-width:750px;*/
    }
    .k-pager-wrap.k-grid-pager.k-widget {
        font-size: 12px;
    }
    .k-pager-wrap .k-dropdown {
        width: 43px;
    }
    .k-pager-info {
        padding: 0;
    }
    .k-pager-input, .k-pager-sizes {
        padding: 0 5px;
    }
</style>
<input type="hidden" id="RecordID" name="ShowRecord" />
<div class="modal-body">
    <div class="row">
        <div class="col-md-12">
            @*@Html.AntiForgeryToken()*@
            <div class="contant_page" @*style="line-height:0;padding-left: 6px;"*@>
                <div class="row">
                    <div class="lable-align-top">
                        @{  if (Session != null && Session["CurrentUser"] != null)
                          {
                              var currentUser = (CurrentUserDetail)Session["CurrentUser"];
                            <h2>Welcome @currentUser.FullName</h2>
                              if (@currentUser.LastLoginActivity != null)
                              {

                               // <span>Your last login was on @currentUser.LastLoginActivity.ToString().AsDateTime().ToString("dddd, dd MMMM yyyy HH:mm:ss").</span>
                                <span>Your last login was on @currentUser.LastLoginActivity.ToString().AsDateTime().ToString("dddd, dd MMMM yyyy")</span>
                                 <span>at @currentUser.LastLoginActivity.ToString().AsDateTime().ToString("HH:mm:ss").</span>
                            
                              }
                              // Changes done for showing PendingApproval tasks to Admin & SuperAdmin also
                              //if (currentUser.PageAccessCode == "SUPERADMIN" || currentUser.PageAccessCode == "ADMIN" || currentUser.PageAccessCode == "CUSTOMERADMIN")
                              if (currentUser.PageAccessCode == "CUSTOMERADMIN" || currentUser.PageAccessCode == "SUBSIDIARYADMIN" || currentUser.PageAccessCode == "SUBAGENTADMIN")
                              {
                                   <b>You have <span >0</span> pending tasks. </b> 
                              }
                              else
                              {
                                <b>You have <span id="gridcount"></span> pending tasks. </b>  
                              }
                            

                            <p class="spacer1">This is an area for brief system messages or site update notifications.</p>
                          }
                        }
                        </div>

                        <div class="col-md-6">
                            <h2>Pending tasks</h2>
                            <div class="table-responsive Kendogrid" style="border: medium none;margin-top: -3%;">

                                                                @(Html.Kendo().Grid<Revive.Redux.Entities.OrderModel>()
            .Name("RoleGrid")
                     .DataSource(dataSource => dataSource
                                    .Ajax().PageSize(10)
                                                                   .Read("GetOrderStatusDashboard", "Home")
                                                                  .Events(ev => ev.Error("onErrorSearchWindow").Change("OnGridChange"))


                        )
            .Columns(columns =>
                {
                    columns.Bound(c => c.JobOrderHeaderId).Width(80).Title("Order#");
                    columns.Bound(c => c.CustomerName).Width(130).Title("Customer Name");
                    columns.Bound(c => c.NoOfMachines).Width(130).Title("Machines Ordered");
                    columns.Bound(c => c.StatusName).Width(80).Title("Status");
                    columns.Bound(p => p.JobOrderHeaderId).Title("View").ClientTemplate(
                        "<a title='View Order' href='" + Url.Action("ViewOrder", "Order") + "/#= JobOrderHeaderIdEncoded #'" + "><i class='fa fa-eye fa-lg icon-color'></i></a>"
                    ).Filterable(false).Sortable(false);
                })
                                                                .HtmlAttributes(new { style = "width:523px;height:215px;" })
                        .Pageable(pageable =>
                                                {
                                                    pageable.Refresh(true);
                                                    pageable.PageSizes(new int[] { 10, 20, 50 });
                                                    pageable.Messages(messages => { messages.Empty("No records found!"); messages.ItemsPerPage("Items"); });
                                                    pageable.ButtonCount(4);
                                                })
                                           .Filterable(f => f.Operators(o => o.ForString(fs =>
                                                          {
                                                              fs.Clear().Contains("Contains");
                                                              fs.DoesNotContain("Does not contain");
                                                              fs.IsEqualTo("Equal to");
                                                              fs.IsNotEqualTo("Not equal to");
                                                              fs.StartsWith("Starts with");
                                                              fs.EndsWith("Ends with");
                                                          })))
                                                      .Sortable()
                                                              .Scrollable()



                                                                )



                            </div>



                        </div>

                        <div class="col-md-6">
                            <h2>Notifications</h2>
                            <div class="table-responsive Kendogrid" style="border: medium none;margin-top: -3%;">


                                @(Html.Kendo().Grid<Revive.Redux.Entities.NotificationModel>()
            .Name("RoleGrid1")
                     .DataSource(dataSource => dataSource
                                    .Ajax().PageSize(10)
                                                    .Read(read => { read.Action("GetNotification", "Home").Type(HttpVerbs.Post); })
                        )
            .Columns(columns =>
                {
                    columns.Bound(c => c.Notification_Id).Visible(false);
                    columns.Bound(c => c.readFlag).Visible(false);
                    columns.Bound(c => c.NotificationMessages).ClientTemplate("<a onclick='return Notification(\"#=Notification_Id#\")' href='javascript: void(0);'>\"#=NotificationMessages#\"</a>").Title("Notification").Filterable(false).Sortable(false).Width(250);
                    columns.Bound(c => c.Notification_Date).Width(120).Title("Notification Date").ClientTemplate("#= kendo.toString(kendo.parseDate(Notification_Date, 'yyyy-MM-dd'), 'MM-dd-yyyy') #");
                    columns.Bound(c => c.Notification_Id).ClientTemplate("<a title='Delete' id=\"Delete\" onclick=\"DeleteRecord('#= Notification_Id#');\" " + "><img src='" + Url.Content("~/Scripts/images/delite_icon.png") + "' /></a>").Title("Delete").Filterable(false).Sortable(false).Width(80).HtmlAttributes(new { @style = "cursor:pointer" });


                })
                                                .HtmlAttributes(new { style = "width:540px;height:215px;" })
                .Pageable(pageable =>
                                        {
                                            pageable.Refresh(true);
                                            pageable.PageSizes(new int[] { 10, 20, 50 });
                                            pageable.Messages(messages => { messages.Empty("No notifications found!"); messages.ItemsPerPage("Items"); });
                                            pageable.ButtonCount(4);
                                        })
                                   .Filterable(f => f.Operators(o => o.ForString(fs =>
                                                  {
                                                      fs.Clear().Contains("Contains");
                                                      fs.DoesNotContain("Does not contain");
                                                      fs.IsEqualTo("Equal to");
                                                      fs.IsNotEqualTo("Not equal to");
                                                      fs.StartsWith("Starts with");
                                                      fs.EndsWith("Ends with");
                                                  })))
                                      .Sortable()
                                                   .Scrollable()
                                )
                            </div>





                        </div>
                    </div>
            </div>
        </div>
    </div>
</div>
<div id="NotificationModal" class="modal fade" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Notification</h4>
            </div>
            <!-- dialog body -->
            <div class="modal-body">
                <div id="Notificationbody">

                </div>
            </div>

            <!-- dialog buttons -->
            <div class="modal-footer">
                <button type="button" id="Okbtn" onclick="Done()" class="btn GreenBtn btn-primary" data-dismiss="modal">OK</button>
                @*<button type="button" class="btn btn-primary YellowBtn" data-dismiss="modal">No</button>*@
            </div>
        </div>
    </div>
</div>

<div id="DeleteModal" class="modal fade" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <!-- dialog body -->
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div>
                    @Html.Label("Do you want to delete this Notification", htmlAttributes: new { @class = "", @id = "Title" })
                </div>
            </div>

            <!-- dialog buttons -->
            <div class="modal-footer footerbtn">
                <button type="button" id="btnNotificationDelete" class="btn GreenBtn btn-primary" data-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-primary YellowBtn" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="DeleteNotifincationId" name="DeleteNotifincationId" />



<script type="text/javascript">
    var nCount = 0;
    function Row_Databound() {
        var grid = $("#RoleGrid1").data("kendoGrid");
        var data = grid.dataSource.data();
        $.each(data, function (i, row) {
            var Id = row.NotificationMessages;
            var flag = row.readFlag;
            if (flag==true) {
                grid.table.find("tr[data-uid='" + row.uid + "']").css();
            }
        })
    }
    function Notification(id)
    {
        $('#NotificationModal').css("visibility", "visible");
        $('#NotificationModal').modal('show');
        $("#RecordID").val(id);

        $.ajax({
            type: "POST",
            url: '@Url.Action("ShowNotification", "Home")',

            //Your Action name in the DropDownListConstroller.cs
            data: JSON.stringify({id:id}),
            contentType: "application/json; charset=utf-8",
            dataType: "json",

        }).done(function (data) {
            if (data!=null) {
                $('#Notificationbody').html(data);
                result = true;
            }
        })
    }
    function Done()
    {
        $('#Notificationbody').empty();
        var grid = $("#RoleGrid1").data("kendoGrid");
        grid.dataSource.read();
    }
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            $.alert({ content: message, confirm: function () { } });
        }
    }
    function OnGridChange() {
        var grid = $("#RoleGrid").data("kendoGrid");
        nCount = grid.dataSource.total();
        $("#gridcount").text(nCount);
    }
    function onErrorSearchWindow() {

    }
    function DeleteRecord(Id) {
        var arr = Id;
        $('#DeleteModal').modal('show');
        $("#DeleteNotifincationId").val(arr);

    }

    $('#btnNotificationDelete').click(function (e) {
        var id = $("#DeleteNotifincationId").val();

        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteNotication", "Home")',

            //Your Action name in the DropDownListConstroller.cs
            data: JSON.stringify({ id: id }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",

        }).done(function (data) {
            //Successfully pass to server and get response

            $('#RoleGrid1').data().kendoGrid.dataSource.read(data); // or
            if (data.result = "OK") {
                var _errormsg = 'Notification has been deleted successfully';
                toastr.success(_errormsg);
                result = true;
            }
        })
    });




    $(document).ready(function () {
        Revive.Redux.Common.SetParentMenuSelected('Home');
        @if (TempData["PasswordChanged"] != null && (bool)TempData["PasswordChanged"] == true)
        {

            <text>toastr.success('Password has been changed successfully.');</text>
        }

        var grid = $("#RoleGrid1").data("kendoGrid");
        grid.dataSource.read();
        var grid1 = $("#RoleGrid").data("kendoGrid");
        grid1.dataSource.read();
        //Tooltip added to email column of storeUserGrid
        $("#RoleGrid").kendoTooltip({
            filter: "td:nth-child(4)", //this filter selects the second column's cells
            position: "top",
            content: function (e) {
                var dataItem = $("#RoleGrid").data("kendoGrid").dataItem(e.target.closest("tr"));
                var content = dataItem.StatusName;
                return content;
            }
        }).data("kendoTooltip");
        //end




        $('#btnsave').click(function (e) {
            var UserModel =
                 {
                     "User_Level_Name": document.getElementById('txtName').value,
                     "UserTypeID": document.getElementById('ddlUserType').value
                 };

            $.ajax({
                type: "POST",
                url: '@Url.Action("SaveRole", "UserRole")',

                //Your Action name in the DropDownListConstroller.cs
                data: JSON.stringify(UserModel),
                contentType: "application/json; charset=utf-8",
                dataType: "json"

            }).done(function (data) {
                //Successfully pass to server and get response
                if (data.result = "OK") {
                    $.alert({ content: 'Submitted successfully.', confirm: function () { } });
                    result = true;
                }
            }).fail(function (response) {
                if (response.status != 0) {
                    $.alert({ content: response.status + " " + response.statusText, confirm: function () { } });
                    result = false;
                }
            });
        });

    });

    $(function () {
        // $('#RoleGrid >table > tbody').addClass('k-grid-content');


    });
</script>

