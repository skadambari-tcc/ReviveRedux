@using Kendo.Mvc.UI
@using Revive.Redux.Entities
@model GroupModel

@{
    ViewBag.Title = "Manage Groups";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .GreenBtn {
        float: right;
    }
</style>
@using Kendo.Mvc.UI.Fluent
<div class="modal-body">
    <div class="row">
        <div class="col-md-12">
            <div class=" contant_page">
                <div>
                    <div class="row"><div style="margin-left: 0.5%;"><h2>Manage Groups</h2></div></div>
                    <div class="row">
                        <div class="col-md-7"></div>
                        <div class="col-md-4" style="float: right;">
                            <div class="col-md-10">
                                <button id="btnAddGroups" type="button" class="GreenBtn ">Add </button>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="Kendogrid table-responsive" style="margin-left:-0.8%">
                        @*kendogrid*@
                        @Html.HiddenFor(m=>m.Redirectpath)
                        @(Html.Kendo().Grid<Revive.Redux.Entities.GroupModel>()
                                    .Name("Groups")
                                    .DataSource(dataSource => dataSource
                                    .Ajax().PageSize(10)
                                    .Read("GetGroups", "ManageUsers")
                                    .ServerOperation(false)
                        )
                        .Columns(columns =>
                        {
                            columns.Bound(c => c.GroupName).Width(240).Title("Group Name");
                            columns.Bound(c => c.Priority_Id).Width(250).Title("Priority");
                            columns.Bound(p => p.ShippingDate).Title("Shipping Date").ClientTemplate("# if(ShippingDate!=null){# #=kendo.toString(kendo.parseDate(ShippingDate, 'yyyy-MM-dd'), 'MM-dd-yyyy')#  #}#");
                            columns.Bound(c => c.GroupId).ClientTemplate("<a  onclick=\"Edit('#= GroupId #');\" " + "><i class='fa fa-pencil fa-lg icon-color' , style='align:center'></i></a>").Title("Edit").Filterable(false).Sortable(false).Width(80).HtmlAttributes(new { @style = "cursor:pointer" });
                            columns.Bound(p => p.GroupStatus).Title("Action").ClientTemplate(
                                                    "# if (!GroupStatus) { #<a id=\"action\" name='NotActive' runat=\"server\" href='javascript: void(0);' onclick=\"Action('#= GroupId#,#= GroupStatus#');\" " + "><img src='" + Url.Content("~/Scripts/images/disable_icon.png") + "'/></a># }else{#<a id=\"action\" name='Active' runat=\"server\" href='javascript: void(0);' onclick=\"Action('#= GroupId#,#= GroupStatus#');\" " + "><img src='" + Url.Content("~/Scripts/images/delite_icon.png") + "' title='Active'/></a>#} #").Sortable(false).Filterable(false).Width(50).HtmlAttributes(new { @style = "cursor:pointer" });
                        })
                                    .HtmlAttributes(new { style = "width: 1063px;" })
                                    .Pageable(pageable =>
                                        {
                                            pageable.Refresh(true);
                                            pageable.PageSizes(new int[] { 10, 20, 50 });
                                            pageable.Messages(messages => messages.Empty("No record found!"));
                                        })
                                        .Filterable(f => f.Operators(o => o.ForString(fs =>
                                        {
                                            fs.Clear().Contains("Contains");
                                            fs.DoesNotContain("Does not contain");
                                            fs.IsEqualTo("Equal to");
                                            fs.IsNotEqualTo("Not equal to");
                                            fs.StartsWith("Starts with");
                                            fs.EndsWith("Ends with");
                                        })))
                                    .Sortable()
                                    .Scrollable()
                                    .Mobile()
                        )
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@*Modal For Active/DeActive Message*@
<input type="hidden" id="RecordID" name="DeactivateRecord" />
<div id="myModal" class="modal fade" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <!-- dialog body -->
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div>
                    @Html.Label("Title", htmlAttributes: new { @class = "", @id = "lblTitle" })
                </div>
            </div>
            <!-- dialog buttons -->
            <div class="modal-footer footerbtn">
                <button type="button" id="Deactivatebtn" class="btn GreenBtn" data-dismiss="modal" style="float:none;">YES</button>
                <button type="button" class="btn YellowBtn" data-dismiss="modal">NO</button>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function RefreshGrid(e) {
        Revive.Redux.Common.SetParentMenuSelected('Admin');
        Revive.Redux.Common.SetKendoGridHeight();
        $("#Redirectpath").val("ManageGroup");
        var grid = $("#Groups").data("kendoGrid");
        grid.dataSource.read();
    });

    $('#btnAddGroups').click(function () {
        window.location.href = '@Url.Action("AddGroup", "ManageUsers")';
    });
    function Edit(val) {
        var valueId = parseInt(val);
        var path= $("#Redirectpath").val();
        window.location.href = "/ManageUsers/EditGroup?Id=" + valueId + "&path=ManageGroup";
       // window.location.href = 'Url.Action("EditGroup", "ManageUsers")';
    }
    function Action(Id) {
        var arr = Id.split(',');;
        $('#myModal').modal('show');
        var status = (arr[1] === 'true');
        if (!status) {
            $("#lblTitle").text("Do you want to activate this group?");
        }
        else {
            $("#lblTitle").text("Do you want to delete this group?");
        }
        $("#RecordID").val(arr);
    }

    $('#Deactivatebtn').click(function (e) {
        var record = $("#RecordID").val();
        var arr = record.split(',');
        var recordID = arr[0];
        var status = (arr[1] === 'true');

        var objGroupModel =
             {
                 "GroupId": recordID,
                 "GroupStatus": status
             };

        $.ajax({
            type: "POST",
            url: '@Url.Action("ChangeStatusByGroupId", "ManageUsers")',
            data: JSON.stringify(objGroupModel),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        }).done(function (data) {
            $('#Groups').data().kendoGrid.dataSource.read(); // or
            if (data.result = "OK") {

                var successMessage = data.Successmsg;
                var _successmsgs = '';
                if (data.Successmsg != "") {
                    _successmsgs = successMessage;
                    toastr.success(_successmsgs);
                    result = true;
                }
                else {
                    toastr.warning(data.ErrorMsgs);
                }
            }

        })
    });


    @if (TempData["isCreatedSuccess"] != null && (bool)TempData["isCreatedSuccess"] == true)
    {
        <text>toastr.success('@ReviveMessages.Add');</text>
    }

    @if (TempData["isUpdatedSuccess"] != null && (bool)TempData["isUpdatedSuccess"] == true)
    {
        <text>toastr.success('@ReviveMessages.Update');</text>
    }

</script>